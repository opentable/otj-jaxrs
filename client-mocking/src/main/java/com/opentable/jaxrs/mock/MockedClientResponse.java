package com.opentable.jaxrs.mock;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.annotation.Annotation;

import javax.ws.rs.core.Response;
import javax.ws.rs.ext.MessageBodyWriter;

import org.jboss.resteasy.client.jaxrs.internal.ClientConfiguration;
import org.jboss.resteasy.client.jaxrs.internal.ClientResponse;

/**
 * Bridge the Response generated by a {@link ResponseGenerator} into the ClientResponse expected
 * by RESTEasy.
 */
class MockedClientResponse extends ClientResponse {
    private final ByteArrayInputStream data;

    protected MockedClientResponse(ClientConfiguration configuration, Response builtResponse) {
        super(configuration);

        setStatus(builtResponse.getStatus());
        setHeaders(builtResponse.getStringHeaders());

        final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        writeEntity(builtResponse, bytes);
        data = new ByteArrayInputStream(bytes.toByteArray());
    }

    @SuppressWarnings("unchecked")
    private <T> void writeEntity(final Response builtResponse, final ByteArrayOutputStream bytes) {
        final Annotation[] annotations = new Annotation[0];
        T entity = (T) builtResponse.getEntity();
        final Class<T> entityType = (Class<T>) entity.getClass();
        final MessageBodyWriter<T> mbw = configuration.getMessageBodyWriter(entityType, entityType, annotations, builtResponse.getMediaType());

        if (mbw == null) {
            throw new AssertionError("No message body writer found for entity " + entity);
        }

        try {
            mbw.writeTo(entity, entityType, entityType, annotations, builtResponse.getMediaType(), getHeaders(), bytes);
        } catch (IOException e) {
            throw new AssertionError(e);
        }
    }

    @Override
    protected InputStream getInputStream() {
        return data;
    }

    @Override
    protected void setInputStream(InputStream is) {
        throw new UnsupportedOperationException();
    }

    @Override
    protected void releaseConnection() throws IOException {
        data.close();
    }
}
